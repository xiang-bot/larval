app目录，项目的核心目录，写项目，核心代码，包括控制器（例如http下面的控制器，Controller.php基类控制器，别的控制器要继承它，控制器可以进行分目录管理），例如app下面可以创建Admin和Home分别用于前台和后台。
模型（例如User.php，模型直接写在app目录下面，也可以分目录）。

bootstrap目录：启动，laravel启动的一些文件。一般不用动它

config.php目录：配置文件，app.php，项目的主要配置文件，经常需要修改它
auth.php:用于登录的，认证
databse.php:用于配置数据库
Filesystem.php:上传文件和文件存储时会使用它
 
database目录：migirations目录，操作数据库表（通过类创建数据表），迁移文件，创建数据表的文件
seeds目录：种子，存放一些数据表的填充文件，种子文件
factotories：工厂类（封装好的工厂类）

public：存放的入口文件，不在根目录，而是在public目录，只能访问一个文件index.php，单一入口，更安全
css,js：放置css,js文件

resource目录：assets有用的 ，lang语言包目录（项目本地化需要配置语言包），views视图文件（也可以分页管理）

routes目录：路由文件，重点记住web.php，定义路由的文件。

storage存放日志文件和缓存文件和用户上传的文件，linux下保存有可写权限。

tests: 测试文件夹


vendor：第三方工具类，核心代码在laravel文件夹下面，把自己也看成第三方了
.env：配置环境 



artisan:脚手架文件，用于自动生成。生成种子，迁移文件，控制器，等等。运行artisan，必须在当前文件夹下面

===========================
1.路由：建立URL和PHP请求之间的关系，url必须唯一，有重复匹配第一个。
  get post patch delete put 使用最多的是get post，使用手册5.3版本。5.4是在线版，区别不大。
   1.1 基本路由：接受一个URL和闭包，例如：   
      Route::get('/test',function(){
	return '这是基本的路由!';
      });
    运行：http://local.laravel.com/test
    显示：这是基本的路由!

   1.2 路由参数，参数用大括号表示，参数和闭包参数对应
   如：
   Route::get('/testp/{id1}',function($id){
	return "这是必选参数的路由，参数是$id";    //$id就是闭包的形参
   });
   运行：http://local.laravel.com/testp 出错
   运行：http://local.laravel.com/testp/100
   显示：这是必选参数的路由，参数是100
   {id1}和($id)没有必然的联系。{}里面的东西叫做占位符
   
   1.3带可选参数的路由
   Route::get('/testop/{id?}',function($id){
	return "这是可选参数的路由，参数是$id";
   });
   id?表示可选参数，不给值会出错，给默认值可以解决错误！如：
   Route::get('/testop1/{id?}',function($id=2){
	return "这是可选参数的路由，参数是$id";
   });
   $id=2，2就是默认值
   运行：http://local.laravel.com/testop1/12  显示：这是可选参数的路由，参数是12
   运行：http://local.laravel.com/testop1       显示：这是可选参数的路由，参数是2
   2就是默认值 
 
   1.3 参数的正则约束，限定参数的规范
    Route::get('/testrule/{id1}',function($id){
	return "这是参数的正则约束...";
    })->where('id','\d+');  //参数必须是数字
    运行：http://local.laravel.com/testrule/aaa 出错
    运行：http://local.laravel.com/testrule/100 显示：这是参数的正则约束...
    ->where('id','\d+');表示必须是数字
    {id1}只是一个占位符

   1.4 多参数的正则约束，使用数组
   Route::get('/testrules/{name}/{age}',function($n,$a){
	return "这是多参数正则约束{$n},{$a}";
   })->where(['name'=>'\w+','age'=>'\d+']);    //注意对应的关系
   说明：正则约束是对前面第一个参数进行的，使用时使用function中的形参

   1.5 路由到控制器方法
    Route::get('/test/fn','TestController@lst');  //路由到控制器


    1.6. 路由群组
     //分组可以统一管理
     Route::group(['middleware'=>'auth'],function(){
        Route::get('/',function(){
   		//使用中间件
        });
        Route::get('user/profile',function(){
   		//使用中间件
       });   
     });
     
    1.7. any和match
     //网址请求和表单请求都可以执行login
     Route::match(['get','post'],'/admin/login','Admin\ManagerController@login');
     //控制器代码：
    public function login(Request $request){
    	if ($request->isMethod('get')){
    		return view('Admin.login');
    	}elseif($request->isMethod('post')){    		
    		$validator = Validator::make($request->all(),[
    			'username'=>'required|min:2|max:16',
    			'password'=>'required|between:4,20',
    			'captcha' =>'required|size:5|captcha',
    		]);
    		if ($validator->fails()){
    			return redirect('admin/login')
    			->withErrors($validator)
    			->withInput();
    		}
    		$username = $request->input('username');
    		$password = $request->input('password');
    		if (Auth::guard('admin')->attempt(['username'=>$username,'password'=>$password]))
    		{
    			return redirect('/admin/index');
    			
    		}else{
    			echo redirect('/admin/login')
    			->withErrors(['loginError'=>'用户名或者密码错误'])
    			->withInput();
    		}    		
    	}
      }     
     //视图代码：
    显示post表单
    -------------
    Route::any('/test11',function(){
       echo "访问了test11";
    });
   运行：http://local.laravel.com/test11
   显示：访问了test11


    1.8 路由别名
    Route::get('user/aa/bb/cc/dd', function () {
       echo "用别名";
    })->name('profile');//太长了，用别名访问直接使用
    

    路由群组：
    Route::group(['prefix'=>'admin'],function(){
       Route::get('test1',function(){
           echo "11111";
       });
       Route::get('test2',function(){
          echo "22222";
      });
    });
    运行：http://local.laravel.com/admin/test1 打印：11111
    运行：http://local.laravel.com/admin/test2 打印：22222 

3.路由保护





4.中间件